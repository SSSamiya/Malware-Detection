from binascii import unhexlify
import sys
import re
import struct
import yara

FILE_PATH = sys.argv[1]
config = {}

def decrypt_whole_data():
    try:
        encrypt_data = bytearray()
        decrypt_data = b": <b>[ </b> <b>]</b>"
        whole_dec_data = bytearray()

        for i in range(len(decrypt_data)):
            encrypt_data.append(decrypt_data[i] ^ i ^ 170)
        encrypt_data = bytes(encrypt_data)
        #print(encrypt_data)

        file_data = open(FILE_PATH,'rb').read()
        index = file_data.find(encrypt_data)

        if index != -1:
            enc_data = file_data[index : index + 3000]
            for i in range(len(enc_data)):
                whole_dec_data.append((enc_data[i] ^ i ^ 170) & 0xff)
            whole_dec_data = bytes(whole_dec_data)
            #print(whole_dec_data.decode())
            return(whole_dec_data)
    except Exception as e:
        print(e)

def get_strings(whole_dec_data):
    rules = yara.compile('agenttesla.yara')
    matches = rules.match(FILE_PATH)
    param = {0:"index", 1:"start", 2:"size"}
    string = []
    for m in matches:
        for s in m.strings:
            index = s[2].find(b"\x25\x2D")
            if(index != -1):
                temp = {}
                try:
                    for j in range(0, 3):
                        if s[2][index + 4] == 0x1F:
                            temp[param[j]] = s[2][index + 5]
                            index = index + 2
                        elif s[2][index + 4] == 0x20:
                            string__ = struct.unpack("<I", s[2][index + 5: index + 5 + 4])[0]
                            temp[param[j]] = string__
                            index = index + 5
                        else:
                            temp[param[j]] = s[2][index + 4] - 0x16
                            index = index + 1
                    #print(temp)
                except:
                    pass
            for values in temp:
                if values == 'start':
                    start = temp[values]
                elif values == 'size':
                    end = start + temp[values]
                    print(whole_dec_data[start:end])
                    string.append(whole_dec_data[start:end])
    return string

if __name__ == "__main__":
    try:
        whole_dec_data =  decrypt_whole_data()
        string = get_strings(whole_dec_data)
        url_pattern = r"^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$"
        for value in range(len(string)):
            if string[value] == b'<br>' and string[value + 1] == b'<hr>':
                value = value + 2
                if(re.search(url_pattern, string[value].decode())):
                    config["URL"] = string[value].decode()
                    config["Host"] = string[value + 1].decode()
                    config["Username"] = string[value + 2].decode()
                    config["Password"] = string[value + 3].decode()
                    break
        print(config) 
    except Exception as e:
        print(e)