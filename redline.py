from USstrings import *
import base64
from itertools import cycle
import re

FILE_PATH = sys.argv[1]

def isBase64(string):
    try:
        if(base64.b64encode(base64.b64decode(string)) == string):
            return True
        else:
            return False
    except:
        pass

def decrypt_string(enc_data, key):
    try:
        input = base64.b64decode(enc_data)
        xor_result = ''.join(chr(c ^ k) for c,k in zip(input, cycle(key)))
        result = base64.b64decode(xor_result)
        #print(result)
        return result
    except:
        pass
 
if __name__ == "__main__":
    try:
        data = []
        data = get_US_strings(FILE_PATH)
        #print(*data, sep="\n")

        final_key = None
        key_index = None
        ip_index = None
        decrypt_data = None
        for x in range(len(data)):
            if final_key != None:
                break
            if(isBase64(data[x])):
                for j in range(x, x + 5):
                    key = data[j]
                    enc_data = data[x]
                    decrypt_data = decrypt_string(enc_data, key)
                    if(decrypt_data != None and decrypt_data != b''):
                        decrypt_data = decrypt_data.decode()
                        if(re.match(r'\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}:\d{2,5}', decrypt_data)):
                            final_key = key
                            key_index = j
                            ip_index = x
                            #print(decrypt_data)
                            break
        for i in range(ip_index + 1, key_index):
            try:
                temp_data = decrypt_string(data[i], final_key)
                #print(temp_data.decode())
            except Exception as e:
                print(e)
        print("C2 URL : ", decrypt_data)
        print("ID : ", temp_data)
    except Exception as e:
        print(e)